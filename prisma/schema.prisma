// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}



enum PhoneModel {
  iphonex
  iphone11
  iphone12
  iphone13
  iphone14
  iphone15
}

enum CaseMaterial {
  silicone
  polycarbonate
}

enum CaseColor {
  black
  blue
  rose
}

enum CaseFinish {
  smooth
  textured
}

enum UserRole {
  ADMIN
  USER
}
// model User{
//   id String @id @default(cuid())
//   email String
//   Order Order[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  Order Order[]
  emailVerified DateTime?
  image         String?
  password String?
  role UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfimation TwoFactorConfirmation?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  @@unique([email,token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@unique([userId])
}
model Configuration{
  id String @id @default(cuid())
  width Int
  height Int
  imageUrl String
  model PhoneModel?
  material CaseMaterial?
  finish CaseFinish?
  color CaseColor?
  croppedImageUrl String?
  Order Order[]
}



model Order {
  id String @id @default(cuid())
  configurationId String
  configuration Configuration @relation(fields: [configurationId],references: [id])
  user User @relation(fields: [userId],references: [id])
  userId String
  amount Float
  isPaid Boolean @default(false)
  status  OrderStatus @default(awaiting_shipment)
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId],references: [id])
  shippingAddressId String?
  billingAddress BillingAddress? @relation(fields: [billingAddressId],references: [id])
  billingAddressId String?
  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}


model ShippingAddress {
  id String @id @default(cuid())
  name String
  street String
  city String
  postalCode String
  country String 
  state String?
  phoneNumber String?
  orders Order[]
}
model BillingAddress {
  id String @id @default(cuid())
  name String
  street String
  city String
  postalCode String
  country String 
  state String?
  phoneNumber String?
  orders Order[]
}